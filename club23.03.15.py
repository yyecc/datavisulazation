# -*- coding: utf-8 -*-
"""동아리 23.03.15(1)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11T98Mi1iGFnA7yNZcBq-pja_3Ky7Uqzj
"""

import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
mpl.__version__

plt.style.use(['seaborn-notebook'])

fig=plt.figure()
ax=plt.axes()

fig=plt.figure()
plt.plot([0, 0.2 0.4 0.6, 0.8 1]*5);

x=np.arange(0, 10, 0.01)
fig=plt.figure()
plt.plot(x, np.sin(x))

import pandas as pd
import numpy as np
data=pd.read_csv('data.csv')
data=data.fillna(method='ffill')
q1=data.quantile(0.25)
q3=data.quantile(0.75)
iqr=q3=q1
data=data[~((data<(q1-1.5*iqr)|data>(q3+1.5*iqr))).any(axis=1)]

import pandas as pd
import matplotlib.pyplot as plt

url='https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv'
df=pd.read_csv(url)

fig, ax =plt.subplots()
ax.scatter(df['petal_length'], df['petal_width'])
ax.set_xlabel('Petal Length')
ax.set_ylabel('Petal Width')
ax.set_title('Iris Dataset-Petal Length vs. Petal Width')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

t=np.linespace(0,1,1000)
f=10
sine_wave=np.sin(2*np.pi*f*t)
cosine_wave=np.cos(2*np.pi*f*t)

fig.(ax1, ax2)=plt.subplots(2,1)
fig.suptitle('Sine and Cosine Waves')

import numpy as np
import matplotlib.pyplot as plt

# 시간축 생성
t = np.linspace(0, 1, 1000)

# 사인파와 코사인파 생성
f = 10  # 주파수
sine_wave = np.sin(2 * np.pi * f * t)
cosine_wave = np.cos(2 * np.pi * f * t)

# 시간 도메인에서의 사인파와 코사인파 시각화
fig, (ax1, ax2) = plt.subplots(2, 1)
fig.suptitle('Sine and Cosine Waves')
ax1.plot(t, sine_wave)
ax1.set_ylabel('Amplitude')
ax1.set_xlabel('Time (s)')
ax2.plot(t, cosine_wave)
ax2.set_ylabel('Amplitude')
ax2.set_xlabel('Time (s)')

# 주파수 도메인에서의 사인파와 코사인파 시각화
sine_fft = np.fft.fft(sine_wave)
cosine_fft = np.fft.fft(cosine_wave)
freq = np.fft.fftfreq(len(t), t[1] - t[0])
fig, (ax3, ax4) = plt.subplots(2, 1)
fig.suptitle('Frequency Domain Analysis')
ax3.plot(freq, np.abs(sine_fft))
ax3.set_ylabel('Magnitude')
ax3.set_xlabel('Frequency (Hz)')
ax4.plot(freq, np.abs(cosine_fft))
ax4.set_ylabel('Magnitude')
ax4.set_xlabel('Frequency (Hz)')
plt.show()