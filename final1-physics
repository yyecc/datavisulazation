# -*- coding: utf-8 -*-
"""final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11FAp81hYVng6kn1apSkOkQDpm3kjXnOg

#초기 프롬프트
자유낙하 운동, 운동량의 법칙, 케플러의 법칙을 그릴 수 있는 프롬프트 작성
지금부터 코랩에서의 운동 법칙들에 따른 그래프를 그리는 matplotlib 모듈을 사용한 파이썬 코드를 작성할 거야. if문을 사용하여 자유낙하 운동, 운동량의 법칙, 케플러의 법칙에 대한 것인데 먼저 유저에게 이 세 가지 중 어떤 운동에 대해 어떤 것을 선택할 것인지를 묻고, 중력가속도 g는 10m/s^2으로 설정해줘. 그래프를 그릴 때, 자유낙하운동은 초기 속도와 높이를 묻도록 하고, 운동량 보존 법칙은 각 두 물체의 질량을 input을 활용하여 묻도록 해. 모든 정보를 유저에게서 받은 후 자유 낙하 운동은 일차함수 그래프, 운동량 보존 법칙은 막대 그래프를 그릴 것 것이며 각 그래프의 색깔은 colors을 활용하여빨강, 파랑으로 설정해줘. 케플러의 법칙은 지구의 타원 궤도를 그래줘. 모든 정보를 입수 후, gtts모듈을 활용하여 총 보고서를 읽어주는 한국어의 음성을 지원하도록 해
"""

!pip install gtts

import matplotlib.pyplot as plt
import numpy as np
from gtts import gTTS

print("운동 법칙을 선택해주세요.")
print("1: 자유낙하운동, 2: 운동량 보존 법칙, 3: 케플러의 법칙")
choice = int(input("선택: "))

g = 10

if choice == 1:
    initial_velocity = int(input("초기 속도를 입력해주세요 (m/s): "))
    height = int(input("높이를 입력해주세요 (m): "))

    t = np.linspace(0, height, 100)
    y = height - 0.5 * g * t**2 - initial_velocity * t

    plt.plot(t, y, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Height (m)')
    plt.title('Free-Fall Motion')

elif choice == 2:
    mass1 = int(input("첫 번째 물체의 질량을 입력해주세요 (kg): "))
    mass2 = int(input("두 번째 물체의 질량을 입력해주세요 (kg): "))

    plt.bar(["m1", "m2"], [mass1, mass2], color=['red', 'blue'])
    plt.xlabel('Masses')
    plt.ylabel('Mass (kg)')
    plt.title('Conservation of Momentum')

elif choice == 3:
    angle = np.linspace(0, 2 * np.pi, 100)
    semi_major_axis = 1
    semi_minor_axis = 0.8
    x = semi_major_axis * np.cos(angle)
    y = semi_minor_axis * np.sin(angle)

    plt.plot(x, y, color='blue')
    plt.title("Kepler's Law")
    plt.xlabel('Time (s)')
    plt.ylabel('Height (m)')

else:
    print("잘못된 입력입니다.")

plt.show()

text = "여기에 각 상황에 맞는 설명을 작성해주세요."
tts = gTTS(text=text, lang='ko')
tts.save("report.mp3")

"""#최종: 케플러의 법칙 삭제, 등가속도, 등속 원운동 추가

지금부터 코랩에서의 운동 법칙들에 따른 그래프를 그리는 matplotlib 모듈을 사용한 파이썬 코드를 작성할 거야. if문을 사용하여 자유낙하 운동, 운동량의 법칙, 등가속도 운동, 등속 원운동에 대한 것인데 먼저 유저에게 이 세 가지 중 어떤 운동에 대해 어떤 것을 선택할 것인지를 묻고, 중력가속도 g는 10m/s^2으로 설정해줘. 그래프를 그릴 때, 자유낙하운동은 초기 속도와 높이를 묻도록 하고, 운동량 보존 법칙은 각 두 물체의 질량을, 등가속도 운동은 가속도의 크기를, 등속 원운동은 원의 반지름 input을 활용하여 묻도록 해. 등속원운동의 그래프를 표현할 때, 초기 각도는 30도로, 각속도는 임의로 지정해줘. 모든 정보를 유저에게서 받은 후 자유 낙하 운동은 일차함수 그래프, 운동량 보존 법칙은 막대 그래프를 그릴 것 것이며 각 그래프의 색깔은 colors을 활용하여 빨강, 파랑으로 설정해줘. 모든 정보를 입수 후, gtts모듈을 활용하여 현재까지의 정보들만을 가지고 만든 보고서를 읽어주는 한국어의 음성을 지원하도록 해. 대신 다운 받을 필요까지 없으며, 바로 음성을 들을 수 있도록 해줘
"""

!pip install gtts

import matplotlib.pyplot as plt
import numpy as np
from gtts import gTTS
import IPython.display as ipd

print("운동 법칙을 선택해주세요.")
print("1: 자유낙하운동, 2: 운동량 보존 법칙, 3: 등가속도 운동, 4: 등속 원운동")
choice = int(input("선택: "))

g = 10

if choice == 1:
    initial_velocity = int(input("초기 속도를 입력해주세요 (m/s): "))
    height = int(input("높이를 입력해주세요 (m): "))

    t = np.linspace(0, height, 100)
    y = height - 0.5 * g * t**2 - initial_velocity * t

    plt.plot(t, y, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Height (m)')
    plt.title('Free-Fall Motion')
    plt.show()

    text = "여기에 자유낙하운동에 관한 정보를 작성해주세요."

elif choice == 2:
    mass1 = int(input("첫 번째 물체의 질량을 입력해주세요 (kg): "))
    mass2 = int(input("두 번째 물체의 질량을 입력해주세요 (kg): "))

    plt.bar(["m1", "m2"], [mass1, mass2], color=['red', 'blue'])
    plt.xlabel('Masses')
    plt.ylabel('Mass (kg)')
    plt.title('Conservation of Momentum')
    plt.show()

    text = "여기에 운동량 보존 법칙에 관한 정보를 작성해주세요."

elif choice == 3:
    acceleration = int(input("가속도를 입력해주세요 (m/s^2): "))

    t = np.linspace(0, 10, 100)
    velocity = acceleration * t

    plt.plot(t, velocity, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Velocity (m/s)')
    plt.title('Uniformly Accelerated Motion')
    plt.show()

    text = "여기에 등가속도 운동에 관한 정보를 작성해주세요."

elif choice == 4:
    radius = int(input("원의 반지름을 입력해주세요 (m): "))

    angle = np.linspace(0, 2 * np.pi, 100)
    initial_angle = np.deg2rad(30)
    angular_velocity = 1
    x = radius * np.cos(initial_angle + angle * angular_velocity)
    y = radius * np.sin(initial_angle + angle * angular_velocity)

    plt.plot(x, y, color='blue')
    plt.title("Uniform Circular Motion")
    plt.xlabel('X position (m)')
    plt.ylabel('Y position (m)')
    plt.show()

    text = "여기에 등속 원운동에 관한 정보를 작성해주세요."

else:
    print("잘못된 입력입니다.")
    text = ""

if text:
    tts = gTTS(text=text, lang='ko')
    tts.save("report.mp3")
    ipd.display(ipd.Audio("report.mp3"))

"""###그래프를 부연 설명하는 음성 인식의 내용 추가
작성한 프롬프트:
지금부터 코랩에서의 운동 법칙들에 따른 그래프를 그리는 matplotlib 모듈을 사용한 파이썬 코드를 작성할 거야. if문을 사용하여 자유낙하 운동, 운동량의 법칙, 등가속도 운동, 등속 원운동에 대한 것인데 먼저 유저에게 이 세 가지 중 어떤 운동에 대해 어떤 것을 선택할 것인지를 묻고, 중력가속도 g는 10m/s^2으로 설정해줘. 그래프를 그릴 때, 자유낙하운동은 초기 속도와 높이를 묻도록 하고, 운동량 보존 법칙은 각 두 물체의 질량을, 등가속도 운동은 가속도의 크기를, 등속 원운동은 원의 반지름 input을 활용하여 묻도록 해. 등속원운동의 그래프를 표현할 때, 초기 각도는 30도로, 각속도는 임의로 지정해줘. 모든 정보를 유저에게서 받은 후 자유 낙하 운동은 일차함수 그래프, 운동량 보존 법칙은 막대 그래프를 그릴 것 것이며 각 그래프의 색깔은 colors을 활용하여 빨강, 파랑으로 설정해줘. 모든 정보를 입수 후, gtts모듈을 활용하여 현재까지의 정보들만을 가지고 만든 보고서를 읽어주는 한국어의 음성을 지원하도록 해. 대신 다운 받을 필요까지 없으며, 바로 음성을 들을 수 있도록 해줘. 음성 파일을 만들 때, 해당 운동 법칙에 대해 개념 한 줄과 유저가 입력한 값들에 대해 설명해주는 내용으로 구성해줘. 예를 들어 자유낙하 운동이라면, 자유낙하 운동의 개념 한줄, 특징 한줄 설명 후, 이 그래프는 -몇미터의  초기속도가 -인 자유낙하운동의 그래프입니다. 처럼 음성인식의 내용을 구성해줘
"""

!pip install gtts

import matplotlib.pyplot as plt
import numpy as np
from gtts import gTTS
import IPython.display as ipd
import tempfile

print("운동 법칙을 선택해주세요.")
print("1: 자유낙하운동, 2: 운량 보존 법칙, 3: 등가속도 운동, 4: 등속 원운동")
choice = int(input("선택: "))

g = 10

if choice == 1:
    initial_velocity = int(input("초기 속도를 입력해주세요 (m/s): "))
    height = int(input("높이를 입력해주세요 (m): "))

    t = np.linspace(0, 2 * np.sqrt(2 * height / g), 100)
    y = height - 0.5 * g * t**2 - initial_velocity * t

    plt.plot(t, y, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Height (m)')
    plt.title('Free-Fall Motion')
    plt.show()

    text = f"자유낙하운동은 중력의 영향으로 물체가 낙하하는 운동입니다. 높이에서 떨어지게 되면 중력에 의해 유낙하하게 됩니다. 초기 속도가 {initial_velocity}m/s이고 높이가 {height}m인 자유낙하운동의 그래프입니다."

elif choice == 2:
    mass1 = int(input("첫 번째 물체의 질량을 입력해주세요 (kg): "))
    mass2 = int(input("두 번째 물체의 질량을 입력해주세요 (kg): "))

    plt.bar(["m1", "m2"], [mass1, mass2], color=['red', 'blue'])
    plt.xlabel('Masses')
    plt.ylabel('Mass (kg)')
    plt.title('Conservation of Momentum')
    plt.show()

    text = f"운동량 보존 법칙은 외부 힘이 작용하지 않는 상황에서 시스템의 총 운동량이 일정하게 유지되는 법칙입니다. 임펄스와 관련되어 있으며, 상작용하는 물체의 운동량의 합은 일정합니다. 첫 번째 물체의 질량이 {mass1}kg, 두 번째 물체의 질이 {mass2}kg인 운동량 보존 법칙의 그래프입니다."

elif choice == 3:
    acceleration = int(input("가속도를 입력해주세요 (m/s^2): "))

    t = np.linspace(0, 10, 100)
    velocity = acceleration * t

    plt.plot(t, velocity, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Velocity (m/s)')
    plt.title('Uniformly Accelerated Motion')
    plt.show()

    text = f"등가속도 운동은 일정한 가속도로 속도를 변화시키며 움직이는 운동입니다. 중력에 의해 변화하는도에 관련된 움직임은 등가속도운동입니다. 가속도가 {acceleration}m/s²인 등가속도 운동의 그래프입니다."

elif choice == 4:
    radius = int(input("원의 반지름을 입력해주세요 (m): "))

    angle = np.linspace(0, 2 * np.pi, 100)
    initial_angle = np.deg2rad(30)
    angular_velocity = 1
    x = radius * np.cos(initial_angle + angle * angular_velocity)
    y = radius * np.sin(initial_angle + angle * angular_velocity)

    plt.plot(x, y, color='blue')
    plt.title("Uniform Circular Motion")
    plt.xlabel('X position (m)')
    plt.ylabel('Y position (m)')
    plt.show()

    text = f"등속 원운동은 일정한 속도로 원을 따라 움직이는 운동입니다. 중심에 작용하는 힘은 중심으로 향합니다. 물체는 지름 {radius}m인 원을 그리면서 초기 각도가 30도, 각 속도가 임의로 설정된 등속 원운동의 그래프입니다."

else:
    print("잘못된 입력입니다.")
    text = ""

if text:
    tts = gTTS(text=text, lang='ko')
    with tempfile.NamedTemporaryFile(delete=True) as fp:
        tts.save(fp.name)
        ipd.display(ipd.Audio(fp.name))

!pip install gtts

import matplotlib.pyplot as plt
import numpy as np
from gtts import gTTS
import IPython.display as ipd
import tempfile

print("운동 법칙을 선택해주세요.")
print("1: 자유낙하운동, 2: 운량 보존 법칙, 3: 등가속도 운동, 4: 등속 원운동")
choice = int(input("선택: "))

g = 10

if choice == 1:
    initial_velocity = int(input("초기 속도를 입력해주세요 (m/s): "))
    height = int(input("높이를 입력해주세요 (m): "))

    t = np.linspace(0, 2 * np.sqrt(2 * height / g), 100)
    y = height - 0.5 * g * t**2 - initial_velocity * t

    plt.plot(t, y, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Height (m)')
    plt.title('Free-Fall Motion')
    plt.show()

    text = f"자유낙하운동은 중력의 영향으로 물체가 낙하하는 운동입니다. 높이에서 떨어지게 되면 중력에 의해 유낙하하게 됩니다. 초기 속도가 {initial_velocity}m/s이고 높이가 {height}m인 자유낙하운동의 그래프입니다."

elif choice == 2:
    mass1 = int(input("첫 번째 물체의 질량을 입력해주세요 (kg): "))
    mass2 = int(input("두 번째 물체의 질량을 입력해주세요 (kg): "))

    plt.bar(["m1", "m2"], [mass1, mass2], color=['red', 'blue'])
    plt.xlabel('Masses')
    plt.ylabel('Mass (kg)')
    plt.title('Conservation of Momentum')
    plt.show()

    text = f"운동량 보존 법칙은 외부 힘이 작용하지 않는 상황에서 시스템의 총 운동량이 일정하게 유지되는 법칙입니다. 임펄스와 관련되어 있으며, 상작용하는 물체의 운동량의 합은 일정합니다. 첫 번째 물체의 질량이 {mass1}kg, 두 번째 물체의 질이 {mass2}kg인 운동량 보존 법칙의 그래프입니다."

elif choice == 3:
    acceleration = int(input("가속도를 입력해주세요 (m/s^2): "))

    t = np.linspace(0, 10, 100)
    velocity = acceleration * t

    plt.plot(t, velocity, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Velocity (m/s)')
    plt.title('Uniformly Accelerated Motion')
    plt.show()

    text = f"등가속도 운동은 일정한 가속도로 속도를 변화시키며 움직이는 운동입니다. 중력에 의해 변화하는도에 관련된 움직임은 등가속도운동입니다. 가속도가 {acceleration}m/s²인 등가속도 운동의 그래프입니다."

elif choice == 4:
    radius = int(input("원의 반지름을 입력해주세요 (m): "))

    angle = np.linspace(0, 2 * np.pi, 100)
    initial_angle = np.deg2rad(30)
    angular_velocity = 1
    x = radius * np.cos(initial_angle + angle * angular_velocity)
    y = radius * np.sin(initial_angle + angle * angular_velocity)

    plt.plot(x, y, color='blue')
    plt.title("Uniform Circular Motion")
    plt.xlabel('X position (m)')
    plt.ylabel('Y position (m)')
    plt.show()

    text = f"등속 원운동은 일정한 속도로 원을 따라 움직이는 운동입니다. 중심에 작용하는 힘은 중심으로 향합니다. 물체는 지름 {radius}m인 원을 그리면서 초기 각도가 30도, 각 속도가 임의로 설정된 등속 원운동의 그래프입니다."

else:
    print("잘못된 입력입니다.")
    text = ""

if text:
    tts = gTTS(text=text, lang='ko')
    with tempfile.NamedTemporaryFile(delete=True) as fp:
        tts.save(fp.name)
        audio = ipd.Audio(fp.name)
        display(audio)

import matplotlib.pyplot as plt
from gtts import gTTS
from IPython.display import Audio
import numpy as np

g = 10  # 중력 가속도 (m/s^2)

# 사용자로부터 운동 법칙 선택
motion_law = input("어떤 운동에 대해 그래프를 그리시겠습니까? (자유낙하/운동량/등가속도/등속원운동): ")

if motion_law == "자유낙하":
    v0 = float(input("초기 속도(m/s)를 입력하세요: "))
    h0 = float(input("높이(m)를 입력하세요: "))

    t = np.linspace(0, np.sqrt(2 * h0 / g), 100)
    y = h0 - 0.5 * g * t**2

    plt.plot(t, y, color='red')
    plt.xlabel("시간 (s)")
    plt.ylabel("높이 (m)")
    plt.title("자유낙하 운동 그래프")
    plt.grid(True)
    plt.show()

    concept = "자유낙하 운동은 자유로운 낙하 동안에만 중력의 영향을 받는 운동입니다."
    characteristics = "자유낙하 운동의 특징은 초기 속도가 0일 때 가장 높이 올라갈 수 있는 점입니다."

    speech_text = f"{concept}. {characteristics}. 이 그래프는 {h0}미터의 초기 속도가 {v0}인 자유낙하 운동의 그래프입니다."
    tts = gTTS(text=speech_text, lang='ko')
    tts.save('motion_graph.mp3')
    Audio('motion_graph.mp3', autoplay=True)

elif motion_law == "운동량":
    m1 = float(input("첫 번째 물체의 질량(kg)을 입력하세요: "))
    m2 = float(input("두 번째 물체의 질량(kg)을 입력하세요: "))

    p1 = m1 * 0.5  # 첫 번째 물체의 운동량
    p2 = m2 * 0.5  # 두 번째 물체의 운동량

    objects = ('물체 1', '물체 2')
    y_pos = np.arange(len(objects))
    momentum = [p1, p2]

    plt.bar(y_pos, momentum, color=['red', 'blue'])
    plt.xticks(y_pos, objects)
    plt.ylabel("운동량 (kg·m/s)")
    plt.title("운동량 보존 법칙 그래프")
    plt.grid(True)
    plt.show()

    concept = "운동량 보존 법칙은 폐쇄계에서 물체들 간의 운동량 합이 변하지 않는 법칙입니다."
    characteristics = "운동량은 물체의 질량과 속도의 곱으로 계산됩니다."

    speech_text = f"{concept}. {characteristics}. 이 그래프는 첫 번째 물체의 질량이 {m1}kg, 두 번째 물체의 질량이 {m2}kg일 때의 운동량 보존 법칙을 나타낸 그래프입니다."
    tts = gTTS(text=speech_text, lang='ko')
    tts.save('motion_graph.mp3')
    Audio('motion_graph.mp3', autoplay=True)

!pip install gtts

import matplotlib.pyplot as plt
import numpy as np
from gtts import gTTS
import IPython.display as ipd
import tempfile

print("운동 법칙을 선택해주세요.")
print("1: 자유낙하운동, 2: 운동량 보존 법칙, 3: 등가속도 운동, 4: 등속 원운동")
choice = int(input("선택: "))

g = 10

if choice == 1:
    initial_velocity = int(input("초기 속도를 입력해주세요 (m/s): "))
    height = int(input("높이를 입력해주세요 (m): "))

    t = np.linspace(0, 2 * np.sqrt(2 * height / g), 100)
    y = height - 0.5 * g * t ** 2 - initial_velocity * t

    plt.plot(t, y, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Height (m)')
    plt.title('Free-Fall Motion')
    plt.show()

    text = f"자유낙하운동은 중력의 영향으로 물체가 낙하하는 운동입니다. 높이에서 떨어지게 되면 중력에 의해 유낙하하게 됩니다. 초기 속도가 {initial_velocity}m/s이고 높이가 {height}m인 자유낙하운동의 그래프입니다."

elif choice == 2:
    mass1 = int(input("첫 번째 물체의 질량을 입력해주세요 (kg): "))
    mass2 = int(input("두 번째 물체의 질량을 입력해주세요 (kg): "))

    plt.bar(["m1", "m2"], [mass1, mass2], color=['red', 'blue'])
    plt.xlabel('Masses')
    plt.ylabel('Mass (kg)')
    plt.title('Conservation of Momentum')
    plt.show()

    text = f"운동량 보존 법칙은 외부 힘이 작용하지 않는 상황에서 시스템의 총 운동량이 일정하게 유지되는 법칙입니다. 상작용하는 물체의 운동량의 합은 일정합니다. 첫 번째 물체의 질량이 {mass1}kg, 두 번째 물체의 질이 {mass2}kg인 운동량 보존 법칙의 그래프입니다."

elif choice == 3:
    acceleration = int(input("가속도를 입력해주세요 (m/s^2): "))

    t = np.linspace(0, 10, 100)
    velocity = acceleration * t

    plt.plot(t, velocity, color='red')
    plt.xlabel('Time (s)')
    plt.ylabel('Velocity (m/s)')
    plt.title('Uniformly Accelerated Motion')
    plt.show()

    text = f"등가속도 운동은 일정한 가속도로 속도를 변화시키며 움직이는 운동입니다. 중력에 의해 변화하는도에 관련된 움직임은 등가속도운동입니다. 가속도가 {acceleration}m/s²인 등가속도 운동의 그래프입니다."

elif choice == 4:
    radius = int(input("원의 반지름을 입력해주세요 (m): "))

    angle = np.linspace(0, 2 * np.pi, 100)
    initial_angle = np.deg2rad(30)
    angular_velocity = 1
    x = radius * np.cos(initial_angle + angle * angular_velocity)
    y = radius * np.sin(initial_angle + angle * angular_velocity)

    plt.plot(x, y, color='blue')
    plt.title("Uniform Circular Motion")
    plt.xlabel('X position (m)')
    plt.ylabel('Y position (m)')
    plt.show()

    text = f"등속 원운동은 일정한 속도로 원을 따라 움직이는 운동입니다. 중심에 작용하는 힘은 중심으로 향합니다. 물체는 지름 {radius}m인 원을 그리면서 초기 각도가 30도, 각 속도가 임의로 설정된 등속 원운동의 그래프입니다."

else:
    print("잘못된 입력입니다.")
    text = ""

if text:
    tts = gTTS(text=text, lang='ko')
    with tempfile.NamedTemporaryFile(delete=True) as fp:
        tts.save(fp.name)
        audio = ipd.Audio(fp.name)
        display(audio)

