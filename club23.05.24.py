# -*- coding: utf-8 -*-
"""05. 24 동아리활동

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Of8Vqpa0CCErPvLeondcTdXQvL3477vb
"""

# 필요한 모듈 설치
!pip install numpy
!pip install matplotlib

# 필요한 모듈 가져오기
import numpy as np
import matplotlib.pyplot as plt

# LC 회로 파라미터 설정
L = 0.5  # 진동자(inductor)의 인덕턴스 (henry)
C = 0.002  # 축전기(capacitor)의 전기용량 기척 )))
w5  # 전압의 초기값 (볼트)
I0 = 0  # 전류의 초기값 (앰프)

0 = 1 / np.sqrt(L * C)  # 고유 진동수

# 시간 변수 정의
t = np.linspace(0, 5 * 2 * np.pi / w0, 1000)  # 다섯 주기 동안의 시간 영역

# 초기 조건 설정 (전압과 전류)
V0 = 시간에 따른 전압 및 전류 계산
V_t = V0 * np.cos(w0 * t)
I_t = -V0 / L * np.sin(w0 * t)

# 시각화
plt.figure(figsize=(10, 6))

# 전압 그래프
plt.subplot(2, 1, 1)
plt.plot(t, V_t)
plt.title('Voltage in LC Circuit')
plt.ylabel('Voltage (V)')
plt.grid()

# 전류 그래프
plt.subplot(2, 1, 2)
plt.plot(t, I_t)
plt.title('Current in LC Circuit')
plt.ylabel('Current (I)')
plt.xlabel('Time (t)')
plt.grid()

plt.tight_layout()
plt.show()

# 필요한 모듈 설치
!pip install numpy
!pip install matplotlib

# 필요한 모듈 가져오기
import numpy as np
import matplotlib.pyplot as plt

# LC 회로 파라미터 설정
L = 0.5  # 진동자(inductor)의 인덕턴스 (henry)
C = 0.002  # 축전기(capacitor)의 전기용량 (퍼럿)
V0 = 5  # 전압의 초기값 (볼트)
I0 = 0  # 전류의 초기값 (앰프)

w0 = 1 / np.sqrt(L * C)  # 고유 진동수

# 시간 변수 정의
t = np.linspace(0, 5 * 2 * np.pi / w0, 1000)  # 다섯 주기 동안의 시간 영역

# 시간에 따른 전압 및 전류 계산
V_t = V0 * np.cos(w0 * t)
I_t = -V0 / L * np.sin(w0 * t)

# 시각화
plt.figure(figsize=(10, 6))

# 전압 그래프
plt.subplot(2, 1, 1)
plt.plot(t, V_t)
plt.title('Voltage in LC Circuit')
plt.ylabel('Voltage (V)')
plt.grid()

# 전류 그래프
plt.subplot(2, 1, 2)
plt.plot(t, I_t)
plt.title('Current in LC Circuit')
plt.ylabel('Current (I)')
plt.xlabel('Time (t)')
plt.grid()

plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# 회로 요소 값 설정
R = 1000  # 저항 값
V_in = 1  # 입력 전압 값

# 회로 요소 값 초기화
L = 10e-3  # 인덕턴스 값
C = 10e-6  # 커패시턴스 값

# 주파수 범위 설정
frequencies = np.linspace(1, 1000, 1000)

# 전류 계산
currents = np.zeros_like(frequencies)
for i, f in enumerate(frequencies):
    omega = 2 * np.pi * f
    X_L = omega * L
    X_C = 1 / (omega * C)
    Z = complex(R, X_L - X_C)
    I = V_in / Z
    currents[i] = np.abs(I)

# 그래프 출력
plt.plot(frequencies, currents)
plt.title("LC Circuit's Current-Frequency Response")
plt.xlabel("Frequency (Hz)")
plt.ylabel("Current (A)")
plt.show()